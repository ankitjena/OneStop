{
  "_from": "passport-twitter-token@^1.3.0",
  "_id": "passport-twitter-token@1.3.0",
  "_inBundle": false,
  "_integrity": "sha1-0uCyM3DsiaKYL31Z1OAtpuZGbik=",
  "_location": "/passport-twitter-token",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "passport-twitter-token",
    "fetchSpec": "^1.3.0",
    "name": "passport-twitter-token",
    "raw": "passport-twitter-token@^1.3.0",
    "rawSpec": "^1.3.0",
    "registry": true,
    "saveSpec": null,
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/passport-twitter-token/-/passport-twitter-token-1.3.0.tgz",
  "_shasum": "d2e0b23370ec89a2982f7d59d4e02da6e6466e29",
  "_shrinkwrap": null,
  "_spec": "passport-twitter-token@^1.3.0",
  "_where": "/Users/alexanderleon/open_source/social-auth-example/backend",
  "author": {
    "email": "nick@penree.com",
    "name": "Nicholas Penree",
    "url": "http://penree.com"
  },
  "bugs": {
    "url": "http://github.com/drudge/passport-twitter-token/issues"
  },
  "bundleDependencies": false,
  "contributors": [
    {
      "name": "Eugene Obrezkov",
      "email": "ghaiklor@gmail.com",
      "url": "http://ghaiklor.com"
    }
  ],
  "dependencies": {
    "passport-oauth": "1.0.0"
  },
  "deprecated": false,
  "description": "Twitter token authentication strategy for Passport",
  "devDependencies": {
    "babel": "5.8.23",
    "chai": "3.3.0",
    "chai-passport-strategy": "0.2.0",
    "istanbul": "0.3.21",
    "mocha": "2.3.3",
    "sinon": "1.17.1"
  },
  "homepage": "https://github.com/drudge/passport-twitter-token#readme",
  "keywords": [
    "auth",
    "authentication",
    "authn",
    "identity",
    "passport",
    "twitter"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "name": "passport-twitter-token",
  "optionalDependencies": {},
  "readme": "# passport-twitter-token\n\n[![Build Status](https://travis-ci.org/drudge/passport-twitter-token.svg)](https://travis-ci.org/drudge/passport-twitter-token)\n[![Coverage Status](https://coveralls.io/repos/drudge/passport-twitter-token/badge.svg?branch=master&service=github)](https://coveralls.io/github/drudge/passport-twitter-token?branch=master)\n![Downloads](https://img.shields.io/npm/dm/passport-twitter-token.svg)\n![Downloads](https://img.shields.io/npm/dt/passport-twitter-token.svg)\n![npm version](https://img.shields.io/npm/v/passport-twitter-token.svg)\n![dependencies](https://img.shields.io/david/drudge/passport-twitter-token.svg)\n![dev dependencies](https://img.shields.io/david/dev/drudge/passport-twitter-token.svg)\n![License](https://img.shields.io/npm/l/passport-twitter-token.svg)\n\n[Passport](http://passportjs.org/) strategy for authenticating with [Twitter](http://twitter.com/) tokens using the OAuth 1.0a API.\n\nThis module lets you authenticate using Twitter in your Node.js applications.\nBy plugging into Passport, Twitter authentication can be easily and unobtrusively integrated into any application or framework that supports [Connect](http://www.senchalabs.org/connect/)-style middleware, including [Express](http://expressjs.com/).\n\n### Installation\n\n#### Using npm\n\n    $ npm install passport-twitter-token\n\n#### Using yarn\n\n    $ yarn add passport-twitter-token\n\n## Usage\n\n### Configure Strategy\n\nThe Twitter authentication strategy authenticates users using a Twitter account and OAuth tokens.\nThe strategy requires a `verify` callback, which receives the access token and corresponding secret as arguments, as well as `profile` which contains the authenticated user's Twitter profile.\nThe `verify` callback must call `done` providing a user to complete authentication.\n\nIn order to identify your application to Twitter, specify the consumer key, consumer secret, and callback URL within `options`.\nThe consumer key and secret are obtained by [creating an application](https://dev.twitter.com/apps) at Twitter's [developer](https://dev.twitter.com/) site.\n\nOptional fields:\n - `includeEmail` - Boolean \n - `includeStatus` - Boolean\n - `includeEntities` - Boolean\n - `userProfileURL` - Default `https://api.twitter.com/1.1/account/verify_credentials.json`\n \n```javascript\nvar TwitterTokenStrategy = require('passport-twitter-token');\n\npassport.use(new TwitterTokenStrategy({\n    consumerKey: TWITTER_CONSUMER_KEY,\n    consumerSecret: TWITTER_CONSUMER_SECRET\n  }, function(token, tokenSecret, profile, done) {\n    User.findOrCreate({ twitterId: profile.id }, function (error, user) {\n      return done(error, user);\n    });\n  }\n));\n```\n\n### Authenticate Requests\n\nUse `passport.authenticate()`, specifying the `'twitter-token'` strategy, to authenticate requests.\n\nFor example, as route middleware in an [Express](http://expressjs.com/) application:\n\n```javascript\napp.post('/auth/twitter/token',\n  passport.authenticate('twitter-token'),\n  function (req, res) {\n    // do something with req.user\n    res.send(req.user ? 200 : 401);\n  }\n);\n```\n\nOr as action in Sails framework:\n\n```javascript\n// api/controllers/AuthController.js\nmodule.exports = {\n  twitter: function(req, res) {\n    passport.authenticate('twitter-token', function(error, user, info) {\n      // do your stuff with user\n    })(req, res);\n  }\n};\n```\n\nExecute a request (GET or POST) to created route with the following data:\n\n```\nGET /auth/twitter/token?oauth_token=<TOKEN>&oauth_token_secret=<TOKEN_SECRET>&user_id=<USER_ID>\n```\n\n### Performing Twitter Reverse Auth Step 1 Server-Side\n\nTo remove the need to embed the consumer secret in your client application, you can setup a route to perform step 1 on the server-side.\n\nFor example, as route in an [Express](http://expressjs.com/) application using the [request](https://github.com/mikeal/request) module:\n\n```javascript\nvar request = require('request');\n\napp.post('/auth/twitter/reverse', function(req, res) {\n  var self = this;\n\n  request.post({\n    url: 'https://api.twitter.com/oauth/request_token',\n    oauth: {\n      consumer_key: app.set('twitter client key'),\n      consumer_secret: app.set('twitter client secret')\n    },\n    form: { x_auth_mode: 'reverse_auth' }\n  }, function (err, r, body) {\n    if (err) {\n      return res.send(500, { message: e.message });\n    }\n\n    if (body.indexOf('OAuth') !== 0) {\n      return res.send(500, { message: 'Malformed response from Twitter' });\n    }\n\n    res.send({ x_reverse_auth_parameters: body });\n  });\n};\n```\n\n## Credits\n\n  - [Nicholas Penree](http://github.com/drudge)\n  - [Jared Hanson](http://github.com/jaredhanson)\n  - [Eugene Obrezkov](http://github.com/ghaiklor)\n\n## License\n\nThe MIT License (MIT)\n\nCopyright (c) 2012-2015 Nicholas Penree\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/drudge/passport-twitter-token.git"
  },
  "scripts": {
    "compile": "babel src --out-dir lib",
    "prepublish": "npm run compile",
    "test": "istanbul cover _mocha"
  },
  "version": "1.3.0"
}
